#| warning: false
#| echo: false
df$date <- dmy(df$date)
#| warning: false
#| echo: false
df$date <- dmy(df$date)
library(lubridate)
df$date <- dmy(df$date)
library(lubridate)
data <- read.csv("C:/Users/Pc/Documents/Data/dataset.csv")
# Create a function to determine fiscal year based on given formula
get_fiscal_year <- function(date) {
year <- as.integer(format(date, "%Y"))
ifelse(month(date) >= 7, year + 1, year)
}
# Calculate fiscal year for each observation in the data frame
data$fiscal_year <- get_fiscal_year(as.Date(data$Observation.Date, format = "%d-%b-%Y"))
# Group by country and fiscal year, then calculate sum of remit values
df <- data %>%
group_by(Series.Display.Name, Observation.Date) %>%
summarise(remit = sum(Observation.Value)) %>%
rename(country = Series.Display.Name,
date = Observation.Date)%>%
mutate(country = sub(".*?\\.?\\s+(\\b\\w+\\b)", "\\1", country))%>%
filter(!str_detect(country, "Cash Flow|Other GCC Countries|Total|EU Countries|Encashment|Dubai|Sharjah|Abu Dhabi|Others"))%>%
arrange(country)%>%
mutate(remit = round(remit/1000 , 2))
monthly_data <- df %>%
group_by(month_year = floor_date(date, "month")) %>%
summarize(total_value = sum(remit, na.rm = TRUE))
#| warning: false
#| echo: false
library(readxl)
library(htmlwidgets)
library(dplyr)
library(lubridate)
library(stringr)
library(plotly)
data <- read.csv("C:/Users/Pc/Documents/Data/dataset.csv")
# Remittances: Pakistan's Economic Lifeline
# Create a function to determine fiscal year based on given formula
get_fiscal_year <- function(date) {
year <- as.integer(format(date, "%Y"))
ifelse(month(date) >= 7, year + 1, year)
}
# Calculate fiscal year for each observation in the data frame
data$fiscal_year <- get_fiscal_year(as.Date(data$Observation.Date, format = "%d-%b-%Y"))
# Group by country and fiscal year, then calculate sum of remit values
df <- data %>%
group_by(Series.Display.Name, Observation.Date) %>%
summarise(remit = sum(Observation.Value)) %>%
rename(country = Series.Display.Name,
date = Observation.Date)%>%
mutate(country = sub(".*?\\.?\\s+(\\b\\w+\\b)", "\\1", country))%>%
filter(!str_detect(country, "Cash Flow|Other GCC Countries|Total|EU Countries|Encashment|Dubai|Sharjah|Abu Dhabi|Others"))%>%
arrange(country)%>%
mutate(remit = round(remit/1000 , 2))
df$date <- dmy(df$date)
monthly_data <- df %>%
group_by(month_year = floor_date(date, "month")) %>%
summarize(total_value = sum(remit, na.rm = TRUE))
annual_data <- df %>%
mutate(fiscal_year = get_fiscal_year(date)) %>%
group_by(fiscal_year) %>%
summarize(total_value = sum(remit, na.rm = TRUE))
# Create the plotly line chart with dropdown menu
fig <- plot_ly() %>%
add_trace(data = monthly_data, x = ~month_year,
y = ~total_value, name = "Monthly Data", visible = TRUE,
type = 'scatter', mode = "lines+markers") %>%
add_trace(data = annual_data, x = ~fiscal_year,
y = ~total_value, name = "", visible = FALSE, type = 'scatter',
mode = "lines+markers", hovertemplate = ~paste("Fiscal Year:", fiscal_year, "<br>Total Value:", total_value)) %>%
config(displayModeBar = FALSE)%>%
layout(
title = "Remittance Inflow",
xaxis = list(
title = "Date",
rangeselector = list(
buttons = list(
list(count = 1, label = "1m", step = "month", stepmode = "backward"),
list(count = 6, label = "6m", step = "month", stepmode = "backward"),
list(count = 1, label = "1y", step = "year", stepmode = "backward"),
list(step = "all")
)
),
rangeslider = list(type = "date")
),
yaxis = list(title = "Amount Billion Dollar"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(
method = "update",
args = list(list(visible = c(TRUE, FALSE))),
label = "Monthly"
),
list(
method = "update",
args = list(list(visible = c(FALSE, TRUE))),
label = "Fiscal Year"
)
)
)
)
)
# Print the chart
fig
#| title: Top 10 Remittance Sending Countries
library(dplyr)
#selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
data<-read.csv("C:/Users/Pc/Documents/Data/dataset.csv")
# Place your data transformation code here
df <- data %>%
mutate(date = lubridate::dmy(Observation.Date),
year = lubridate::year(date),
month = lubridate::month(date),
day = lubridate::day(date)) %>%
select(-c(1:3)) %>%
mutate(country = sub('.*from ', '', Series.name)) %>%
filter(year != 2024 & !if_any(where(is.character),
~ str_detect(.x, "Dubai|Sharjah|Abu Dhabi
|Other|Total|ten| certificates|converted"))) %>%
group_by(country, year) %>%
summarise(remit = sum(Observation.Value))
shared_data <- SharedData$new(df)
shared_data <- SharedData$new(top_10)
plot <- plot_ly(shared_data, x = ~country, y = ~remit, type = "bar") %>%
layout(
xaxis = list(categoryorder = "total ascending"),
yaxis = list(title = "Remittance")
)
library(plotly)
library()
library()
#selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
data<-read.csv("C:/Users/Pc/Documents/Data/dataset.csv")
# Place your data transformation code here
df <- data %>%
mutate(date = lubridate::dmy(Observation.Date),
year = lubridate::year(date),
month = lubridate::month(date),
day = lubridate::day(date)) %>%
select(-c(1:3)) %>%
mutate(country = sub('.*from ', '', Series.name)) %>%
filter(year != 2024 & !if_any(where(is.character),
~ str_detect(.x, "Dubai|Sharjah|Abu Dhabi
|Other|Total|ten| certificates|converted"))) %>%
group_by(country, year) %>%
summarise(remit = sum(Observation.Value))
# Place your data transformation code here
df <- data %>%
mutate(date = lubridate::dmy(Observation.Date),
year = lubridate::year(date),
month = lubridate::month(date),
day = lubridate::day(date)) %>%
select(-c(1:3)) %>%
mutate(country = sub('.*from ', '', Series.name)) %>%
filter(year != 2024 & !if_any(where(is.character),
~ str_detect(.x, "Dubai|Sharjah|Abu Dhabi
|Other|Total|ten| certificates|converted"))) %>%
group_by(country, year) %>%
summarise(remit = sum(Observation.Value))
shared_data <- SharedData$new(df)
shared_data <- SharedData$new(top_10)
plot <- plot_ly(shared_data, x = ~country, y = ~remit, type = "bar") %>%
layout(
xaxis = list(categoryorder = "total ascending"),
yaxis = list(title = "Remittance")
)
library(crosstalk)
library(htmlwidgets)
#| title: Top 10 Remittance Sending Countries
library(dplyr)
library(plotly)
library(crosstalk)
library(htmlwidgets)
#selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
data<-read.csv("C:/Users/Pc/Documents/Data/dataset.csv")
# Place your data transformation code here
df <- data %>%
mutate(date = lubridate::dmy(Observation.Date),
year = lubridate::year(date),
month = lubridate::month(date),
day = lubridate::day(date)) %>%
select(-c(1:3)) %>%
mutate(country = sub('.*from ', '', Series.name)) %>%
filter(year != 2024 & !if_any(where(is.character),
~ str_detect(.x, "Dubai|Sharjah|Abu Dhabi
|Other|Total|ten| certificates|converted"))) %>%
group_by(country, year) %>%
summarise(remit = sum(Observation.Value))
top_10 <- df %>%
group_by(year) %>%
arrange(desc(remit)) %>%
slice_head(n = 10)
shared_data <- SharedData$new(df)
shared_data <- SharedData$new(top_10)
plot <- plot_ly(shared_data, x = ~country, y = ~remit, type = "bar") %>%
layout(
xaxis = list(categoryorder = "total ascending"),
yaxis = list(title = "Remittance")
)
filter_widget <- filter_select("year_filter", "Year", shared_data, ~year, multiple = FALSE)
# Combine filter and plot in a single HTML output
bscols(
widths = c(3, 6),
filter_widget,
plot
)
