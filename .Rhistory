library(leafpop)
library(leaflet)
library(htmlwidgets)
loc <- data.frame(
Country = c("India", "Mexico", "China", "Philippines", "France",  "Pakistan", "Egypt", "Bangladesh", "Nigeria", "Germany"),
Rank = 1:10,  # Rank column
Inflow = c(111.2, 61.1, 51.0, 38.0, 30,
29.9, 28.3, 21.5, 20.1, 18.0)  # Inflow values
)
# Define the locations with latitude, longitude, and random numbers
locations <- data.frame(
Country = c("India", "Mexico", "China", "Philippines", "France",
"Pakistan", "Egypt, Arab Rep.", "Bangladesh", "Nigeria", "Germany"),
lat = c(20.5937, 23.6345, 35.8617, 12.8797, 46.6034,
30.3753, 26.8206, 23.6850, 9.081999, 51.1657),
lng = c(78.9629, -102.5528, 104.1954, 121.7740, 2.2137,
69.3451, 30.8025, 90.3563, 8.675277, 10.4515),
number = sample(1:100, 10)  # Random numbers
)
# Create the awesome icon without marker background
awesome_icons <- awesomeIcons(
icon = "dollar",
iconColor = "black",
markerColor = "green",  # Make the marker background transparent
library = "fa"
)
# Create the leaflet map with side popups
leaflet(locations) %>%
addTiles() %>%
setView(15, 28,zoom=2)%>%
addAwesomeMarkers(
~lng, ~lat, icon = awesome_icons,
popup = popupTable(loc,  row.numbers = FALSE, feature.id = FALSE, ))
#| warning: false
#| echo: false
library(dplyr)
library(leafpop)
library(leaflet)
library(htmlwidgets)
loc <- data.frame(
Country = c("India", "Mexico", "China", "Philippines", "France",  "Pakistan", "Egypt", "Bangladesh", "Nigeria", "Germany"),
Rank = 1:10,  # Rank column
Inflow = c("$111.2B", "$61.1B"," $51.0B", "$38.0B", "$30B",
"$29.9B", "$28.3B", "$21.5B", "$20.1B", "$18.0B")  # Inflow values
)
# Define the locations with latitude, longitude, and random numbers
locations <- data.frame(
Country = c("India", "Mexico", "China", "Philippines", "France",
"Pakistan", "Egypt, Arab Rep.", "Bangladesh", "Nigeria", "Germany"),
lat = c(20.5937, 23.6345, 35.8617, 12.8797, 46.6034,
30.3753, 26.8206, 23.6850, 9.081999, 51.1657),
lng = c(78.9629, -102.5528, 104.1954, 121.7740, 2.2137,
69.3451, 30.8025, 90.3563, 8.675277, 10.4515),
number = sample(1:100, 10)  # Random numbers
)
# Create the awesome icon without marker background
awesome_icons <- awesomeIcons(
icon = "dollar",
iconColor = "black",
markerColor = "green",  # Make the marker background transparent
library = "fa"
)
# Create the leaflet map with side popups
leaflet(locations) %>%
addTiles() %>%
setView(15, 28,zoom=2)%>%
addAwesomeMarkers(
~lng, ~lat, icon = awesome_icons,
popup = popupTable(loc,  row.numbers = FALSE, feature.id = FALSE, ))
#| title: Remittance by Country and Year
year_filter <- filter_select("year_filter", "Year", shared_data, ~year)
#| include: false
library(tidyverse)
library(dplyr)
library(ggplot2)
library(crosstalk)
library(plotly)
library(webr)
library(dplyr)
library(scales)
#| title: Top 10 Remittance Sending Countries
#| content: card-toolbar
selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
#| include: false
library(tidyverse)
library(dplyr)
library(ggplot2)
library(crosstalk)
library(plotly)
library(webr)
library(dplyr)
library(scales)
#| title: Top 10 Remittance Sending Countries
#| content: card-toolbar
selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
#| include: false
library(tidyverse)
library(dplyr)
library(ggplot2)
library(htmltools)
library(crosstalk)
library(plotly)
library(webr)
library(dplyr)
library(scales)
#| title: Top 10 Remittance Sending Countries
#| content: card-toolbar
selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
#| include: false
library(tidyverse)
library(dplyr)
library(ggplot2)
library(htmlwidgets)
library(crosstalk)
library(plotly)
library(webr)
library(dplyr)
library(scales)
#| title: Top 10 Remittance Sending Countries
#| content: card-toolbar
selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
library(crosstalk)
library(plotly)
library(webr)
library(dplyr)
library(scales)
#| include: false
library(tidyverse)
library(dplyr)
library(ggplot2)
library(crosstalk)
library(plotly)
library(webr)
library(dplyr)
library(scales)
# Remit
## Row {height = "10%"}
data<-read.csv("C:/Users/Pc/Documents/Data/dataset.csv")
# Place your data transformation code here
df <- data %>%
mutate(date = lubridate::dmy(Observation.Date),
year = lubridate::year(date),
month = lubridate::month(date),
day = lubridate::day(date)) %>%
select(-c(1:3)) %>%
mutate(country = sub('.*from ', '', Series.name)) %>%
filter(year != 2024 & !if_any(where(is.character),
~ str_detect(.x, "Dubai|Sharjah|Abu Dhabi
|Other|Total|ten| certificates|converted"))) %>%
group_by(country, year) %>%
summarise(remit = sum(Observation.Value))
# Place your data transformation code here
df <- data %>%
mutate(date = lubridate::dmy(Observation.Date),
year = lubridate::year(date),
month = lubridate::month(date),
day = lubridate::day(date)) %>%
select(-c(1:3)) %>%
mutate(country = sub('.*from ', '', Series.name)) %>%
filter(year != 2024 & !if_any(where(is.character),
~ str_detect(.x, "Dubai|Sharjah|Abu Dhabi
|Other|Total|ten| certificates|converted"))) %>%
group_by(country, year) %>%
summarise(remit = sum(Observation.Value))
top_10 <- df %>%
group_by(year) %>%
arrange(desc(remit)) %>%
slice_head(n = 10)
shared_data <- SharedData$new(df)
shared_data <- SharedData$new(top_10)
plot <- plot_ly(shared_data, x = ~country, y = ~remit, type = "bar") %>%
layout(
xaxis = list(categoryorder = "total ascending"),
yaxis = list(title = "Remittance")
)
filter_widget <- filter_select("year_filter", "Year", shared_data, ~year, multiple = FALSE)
# Combine filter and plot in a single HTML output
bscols(
widths = c(3, 6),
filter_widget,
plot
)
#| title: Top 10 Remittance Sending Countries
#| content: card-toolbar
selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
#| title: Remittance by Country and Year
year_filter <- filter_select("year_filter", "Year", shared_data, ~year)
country_filter <- filter_select("country_filter", "Country", shared_data, ~country)
# Create plotly plot
plot <- plot_ly(shared_data, x = ~year, y = ~remit, color = ~country,
type = "scatter", mode = "lines") %>%
layout(
xaxis = list(title = "Year"),
yaxis = list(title = "Remittances"), showlegend = FALSE
)
html <- htmltools::tags$html(
htmltools::tags$head(
htmltools::tags$style(
"
.centered-filters {
display: flex;
justify-content: center;
margin-bottom: 20px;
}
.centered-filters .form-group {
margin-right: 10px;
}
.centered-filters input {
width: 90px; /* Adjust the width as needed */
}
"
)
),
htmltools::tags$body(
htmltools::tags$div(class = "centered-filters",
htmltools::tags$div(class = "form-group", year_filter),
htmltools::tags$div(class = "form-group", country_filter)),
plot
)
)
# Render the HTML
htmltools::browsable(html)
#| title: Top 10 Remittance Sending Countries
library(dplyr)
library(plotly)
library(crosstalk)
library(htmlwidgets)
library(stringr)
#selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
data<-read.csv("C:/Users/Pc/Documents/Data/dataset.csv")
# Place your data transformation code here
df <- data %>%
mutate(date = lubridate::dmy(Observation.Date),
year = lubridate::year(date),
month = lubridate::month(date),
day = lubridate::day(date)) %>%
select(-c(1:3)) %>%
mutate(country = sub('.*from ', '', Series.name)) %>%
filter(year != 2024 & !if_any(where(is.character),
~ str_detect(.x, "Dubai|Sharjah|Abu Dhabi
|Other|Total|ten| certificates|converted"))) %>%
group_by(country, year) %>%
summarise(remit = sum(Observation.Value))
top_10 <- df %>%
group_by(year) %>%
arrange(desc(remit)) %>%
slice_head(n = 10)
shared_data <- SharedData$new(df)
shared_data <- SharedData$new(top_10)
plot <- plot_ly(shared_data, x = ~remit, y = ~country, type = "bar") %>%
layout(
xaxis = list(categoryorder = "total ascending"),
yaxis = list(title = "Remittance")
)
filter_widget <- filter_select("year_filter", "Year", shared_data, ~year, multiple = FALSE)
# Combine filter and plot in a single HTML output
bscols(
widths = c(3, 6),
filter_widget,
plot
)
plot <- plot_ly(shared_data, x = ~remit, y = ~country, type = "bar") %>%
layout(
yaxis = list(categoryorder = "total ascending"),
yaxis = list(title = "Remittance")
)
filter_widget <- filter_select("year_filter", "Year", shared_data, ~year, multiple = FALSE)
# Combine filter and plot in a single HTML output
bscols(
widths = c(3, 6),
filter_widget,
plot
)
)) %>% rangeslider() %>%
)) %>% rangeslider() %>%
# Create initial plot with the first country as default
plot_ly(df,
type = 'scatter',
x = ~year,
y = ~remit,
color = ~country,
mode = 'lines+markers',
transforms = list(
list(
type = 'filter',
target = ~country,
operation = '=',
value = unique_countries[1]
)
)) %>% rangeslider() %>%
layout(showlegend = TRUE ,
yaxis = title = "Amount Billion Dollar") %>%
)) %>% rangeslider() %>%
)) %>% rangeslider() %>%
)) %>% rangeslider() %>%
)) %>% rangeslider() %>%
# Create initial plot with the first country as default
plot_ly(df,
type = 'scatter',
x = ~year,
y = ~remit,
color = ~country,
mode = 'lines+markers',
transforms = list(
list(
type = 'filter',
target = ~country,
operation = '=',
value = unique_countries[1]
)
)) %>% rangeslider() %>%
layout(showlegend = TRUE ,
yaxis = list(title = "Amount Billion Dollar"),) %>%
config(displayModeBar=FALSE)
# Create initial plot with the first country as default
df<- data %>%
group_by(Series.Display.Name, fiscal_year) %>%
summarise(remit = sum(Observation.Value)) %>%
rename(country = Series.Display.Name,
year = fiscal_year)%>%
mutate(country = sub(".*?\\.?\\s+(\\b\\w+\\b)", "\\1", country))%>%
filter(!str_detect(country, "Cash Flow|Other|Total|EU Countries|Encashment|Dubai|Sharjah|Abu Dhabi|Others"))%>%
arrange(country)%>%
mutate(remit = round(remit/1000 , 2))
# Create initial plot with the first country as default
plot_ly(df,
type = 'scatter',
x = ~year,
y = ~remit,
color = ~country,
mode = 'lines+markers',
transforms = list(
list(
type = 'filter',
target = ~country,
operation = '=',
value = unique_countries[1]
)
)) %>% rangeslider() %>%
layout(showlegend = TRUE ,
yaxis = list(title = "Amount Billion Dollar"),) %>%
config(displayModeBar=FALSE)
)) %>% rangeslider() %>%
# Create initial plot with the first country as default
plot_ly(df,
type = 'scatter',
x = ~year,
y = ~remit,
color = ~country,
mode = 'lines+markers',
transforms = list(
list(
type = 'filter',
target = ~country,
operation = '=',
value = unique_countries[1]
)
)) %>% rangeslider() %>%
layout(showlegend = TRUE ,
yaxis = list(title = "Amount Billion Dollar"),xaxis = list(title = "Year")) %>%
config(displayModeBar=FALSE)
data <- read.csv("C:/Users/Pc/Documents/Data/dataset.csv")
get_fiscal_year <- function(date) {
year <- as.integer(format(date, "%Y"))
ifelse(month(date) >= 7, year + 1, year)
}
data$fiscal_year <- get_fiscal_year(as.Date(data$Observation.Date, format = "%d-%b-%Y"))
# Group by country and fiscal year, then calculate sum of remit values
df <- data %>%
group_by(Series.Display.Name, Observation.Date) %>%
summarise(remit = sum(Observation.Value)) %>%
rename(country = Series.Display.Name,
date = Observation.Date)%>%
mutate(country = sub(".*?\\.?\\s+(\\b\\w+\\b)", "\\1", country))%>%
filter(!str_detect(country, "Cash Flow|Other GCC Countries|Total|EU Countries|Encashment|Dubai|Sharjah|Abu Dhabi|Others"))%>%
arrange(country)%>%
mutate(remit = round(remit/1000 , 2))
# Create initial plot with the first country as default
df<- data %>%
group_by(Series.Display.Name, fiscal_year) %>%
summarise(remit = sum(Observation.Value)) %>%
rename(country = Series.Display.Name,
year = fiscal_year)%>%
mutate(country = sub(".*?\\.?\\s+(\\b\\w+\\b)", "\\1", country))%>%
filter(!str_detect(country, "Cash Flow|Other|Total|EU Countries|Encashment|Dubai|Sharjah|Abu Dhabi|Others"))%>%
arrange(country)%>%
mutate(remit = round(remit/1000 , 2))
# Create initial plot with the first country as default
plot_ly(df,
type = 'scatter',
x = ~year,
y = ~remit,
color = ~country,
mode = 'lines+markers',
transforms = list(
list(
type = 'filter',
target = ~country,
operation = '=',
value = unique_countries[1]
)
)) %>% rangeslider() %>%
layout(showlegend = TRUE ,
yaxis = list(title = "Amount Billion Dollar"),xaxis = list(title = "Year")) %>%
config(displayModeBar=FALSE)
#| warning: false
#| echo: false
#| title: Country Wise Remittance Trend
library(readxl)
library(htmlwidgets)
library(htmlwidgets)
library(dplyr)
library(lubridate)
library(stringr)
library(stringr)
library(plotly)
data <- read.csv("C:/Users/Pc/Documents/Data/dataset.csv")
get_fiscal_year <- function(date) {
year <- as.integer(format(date, "%Y"))
ifelse(month(date) >= 7, year + 1, year)
}
data$fiscal_year <- get_fiscal_year(as.Date(data$Observation.Date, format = "%d-%b-%Y"))
# Group by country and fiscal year, then calculate sum of remit values
df <- data %>%
group_by(Series.Display.Name, Observation.Date) %>%
summarise(remit = sum(Observation.Value)) %>%
rename(country = Series.Display.Name,
date = Observation.Date)%>%
mutate(country = sub(".*?\\.?\\s+(\\b\\w+\\b)", "\\1", country))%>%
filter(!str_detect(country, "Cash Flow|Other GCC Countries|Total|EU Countries|Encashment|Dubai|Sharjah|Abu Dhabi|Others"))%>%
arrange(country)%>%
mutate(remit = round(remit/1000 , 2))
# Create initial plot with the first country as default
df<- data %>%
group_by(Series.Display.Name, fiscal_year) %>%
summarise(remit = sum(Observation.Value)) %>%
rename(country = Series.Display.Name,
year = fiscal_year)%>%
mutate(country = sub(".*?\\.?\\s+(\\b\\w+\\b)", "\\1", country))%>%
filter(!str_detect(country, "Cash Flow|Other|Total|EU Countries|Encashment|Dubai|Sharjah|Abu Dhabi|Others"))%>%
arrange(country)%>%
mutate(remit = round(remit/1000 , 2))
unique_countries <- unique(df$country)
# Create initial plot with the first country as default
plot_ly(df,
type = 'scatter',
x = ~year,
y = ~remit,
color = ~country,
mode = 'lines+markers',
transforms = list(
list(
type = 'filter',
target = ~country,
operation = '=',
value = unique_countries[1]
)
)) %>% rangeslider() %>%
layout(showlegend = TRUE ,
yaxis = list(title = "Amount Billion Dollar"),xaxis = list(title = "Year")) %>%
config(displayModeBar=FALSE)
getwd()
setwd("C:/Users/Pc/Documents/Github/vistales/test1/Test/")
getwd()
#| title: Top 10 Remittance Sending Countries
library(dplyr)
library(plotly)
library(crosstalk)
library(htmlwidgets)
library(stringr)
#selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
data<-read.csv("./blog/remit/dataset.csv")
#| title: Top 10 Remittance Sending Countries
library(dplyr)
library(plotly)
library(crosstalk)
library(htmlwidgets)
library(stringr)
#selectInput("id", "Select an Year", shared_data, ~year, multiple = FALSE)
data<-read.csv("./dataset.csv")
# Place your data transformation code here
df <- data %>%
mutate(date = lubridate::dmy(Observation.Date),
year = lubridate::year(date),
month = lubridate::month(date),
day = lubridate::day(date)) %>%
select(-c(1:3)) %>%
mutate(country = sub('.*from ', '', Series.name)) %>%
filter(year != 2024 & !if_any(where(is.character),
~ str_detect(.x, "Dubai|Sharjah|Abu Dhabi
|Other|Total|ten| certificates|converted"))) %>%
group_by(country, year) %>%
summarise(remit = sum(Observation.Value))
top_10 <- df %>%
group_by(year) %>%
arrange(desc(remit)) %>%
slice_head(n = 10)
shared_data <- SharedData$new(df)
shared_data <- SharedData$new(top_10)
plot <- plot_ly(shared_data, x = ~country, y = ~remit, type = "bar") %>%
layout(
xaxis = list(categoryorder = "total ascending"),
yaxis = list(title = "Money Sent in $, Million")
)%>%
config(displayModeBar=FALSE)
filter_widget <- filter_select("year_filter", "Year", shared_data, ~year, multiple = FALSE)
# Combine filter and plot in a single HTML output
bscols(
widths = c(3, 6),
filter_widget,
plot
)
